datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --- Explicit join model for Image ↔︎ Tag many-to-many ---
model Image {
  id        Int      @id @default(autoincrement())
  name      String
  url       String
  createdAt DateTime @default(now())

  // Ownership: each image is created by a User
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // relations
  imageTags    ImageToTag[]
  annotations  Annotation[]
  ImageToLabel ImageToLabel[]
}

model Label {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())

  // Ownership: each label is created by a User
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // relations
  imageLabels ImageToLabel[]
  ImageToTag  ImageToTag[]
}

model ImageToLabel {
  imageId Int
  labelId Int

  image Image @relation(fields: [imageId], references: [id], onDelete: Cascade)
  label Label @relation(fields: [labelId], references: [id], onDelete: Cascade)

  @@id([imageId, labelId])
}

model Tag {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())

  // Ownership: each tag is created by a User
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  imageTags ImageToTag[]
}

model ImageToTag {
  imageId Int
  tagId   Int

  image   Image  @relation(fields: [imageId], references: [id], onDelete: Cascade)
  tag     Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)
  Label   Label? @relation(fields: [labelId], references: [id])
  labelId Int?

  @@id([imageId, tagId])
}

model Annotation {
  id      Int    @id @default(autoincrement())
  label   String
  points  Json // store array of {x,y}
  image   Image  @relation(fields: [imageId], references: [id], onDelete: Cascade)
  imageId Int
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  // relations: images and tags they have created
  images Image[]
  tags   Tag[]

  accounts Account[]
  sessions Session[]
  Label    Label[]
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  refresh_token_expires_in Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
